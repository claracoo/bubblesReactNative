{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Circle from \"./Circle\";\n\nvar Circles = function Circles(props) {\n  var _useState = useState({\n    \"Ambiguity\": [0, \"#B56B9A\"],\n    \"Fear\": [0, \"#E3C6DF\"],\n    \"Goals\": [0, \"#5DACCE\"],\n    \"Rundown\": [0, \"#5C83CE\"]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      types = _useState2[0],\n      setTypes = _useState2[1];\n\n  var _useState3 = useState(\"Ambiguity\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      current = _useState4[0],\n      setCurrent = _useState4[1];\n\n  useEffect(function () {\n    var total = props.ambig + props.fear + props.goals + props.rundown;\n    var ambig = props.ambig / total * 300;\n    var fear = props.fear / total * 300;\n    var goals = props.goals / total * 300;\n    var rundown = props.rundown / total * 300;\n    var tempTypes = {\n      \"Ambiguity\": [ambig, \"#B56B9A\"],\n      \"Fear\": [fear, \"#E3C6DF\"],\n      \"Goals\": [goals, \"#5DACCE\"],\n      \"Rundown\": [rundown, \"#5C83CE\"]\n    };\n    setTypes(tempTypes);\n  });\n  return React.createElement(View, {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(View, {\n    style: styles.mainViz\n  }, React.createElement(View, {\n    style: {\n      width: 230,\n      height: 230,\n      borderWidth: 1,\n      borderColor: \"#E5E5E5\",\n      borderRadius: 200,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"relative\"\n    }\n  }, React.createElement(Text, {\n    style: styles.centerText\n  }, \"Feelings\"), React.createElement(Text, {\n    style: styles.centerText\n  }, props.total)), React.createElement(View, {\n    style: {\n      width: 400,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      elevation: 10\n    }\n  }, Object.keys(types).map(function (type) {\n    return React.createElement(View, {\n      key: type,\n      style: {\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }, React.createElement(Circle, {\n      name: type,\n      size: types[type][0],\n      color: types[type][1]\n    }));\n  }))), React.createElement(View, null));\n};\n\nexport default Circles;\nvar styles = StyleSheet.create({\n  centerText: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  mainViz: {\n    display: \"none\"\n  }\n});","map":{"version":3,"sources":["/Users/claracook/Desktop/Hackathon/Bubbles/NewProject/Components/Circles.js"],"names":["React","useState","useEffect","Circle","Circles","props","types","setTypes","current","setCurrent","total","ambig","fear","goals","rundown","tempTypes","display","flexWrap","flexDirection","justifyContent","alignItems","styles","mainViz","width","height","borderWidth","borderColor","borderRadius","position","centerText","elevation","Object","keys","map","type","StyleSheet","create","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport Circle from './Circle'\nconst Circles = (props) => {\n     const[types, setTypes] = useState({\"Ambiguity\": [0, \"#B56B9A\"], \"Fear\": [0, \"#E3C6DF\"], \"Goals\": [0, \"#5DACCE\"], \"Rundown\": [0, \"#5C83CE\"]})\n      const [current, setCurrent] = useState(\"Ambiguity\")\n\n      useEffect(() => {\n        let total = props.ambig + props.fear + props.goals + props.rundown \n        let ambig = (props.ambig / total) * 300\n        let fear = (props.fear / total) * 300\n        let goals = (props.goals / total) * 300\n        let rundown = (props.rundown / total) * 300\n        let tempTypes = {\"Ambiguity\": [ambig, \"#B56B9A\"], \"Fear\": [fear, \"#E3C6DF\"], \"Goals\": [goals, \"#5DACCE\"], \"Rundown\": [rundown, \"#5C83CE\"]}\n        setTypes(tempTypes)\n      })\n\n   return (\n      <View  style={{display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n         <View style={styles.mainViz}>\n            <View style={{width: 230, height: 230, borderWidth: 1, borderColor: \"#E5E5E5\", borderRadius: 200, display:\"flex\", justifyContent: \"center\", alignItems: \"center\", position: \"relative\"}}>\n               <Text style={styles.centerText}>Feelings</Text>\n               <Text style={styles.centerText}>{props.total}</Text>\n            </View>\n            <View style={{width: 400, display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", position: \"absolute\", elevation:10}}>\n               {Object.keys(types).map((type) => (\n                  <View key={type} style={{width: 150, height: 150, display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                     <Circle name={type} size={types[type][0]} color={types[type][1]}/>\n                  </View>\n               )\n               )}\n            </View>\n         </View>\n         <View>\n\n         </View>\n      </View>\n   );\n}\nexport default Circles;\n\nconst styles = StyleSheet.create({\n   centerText: {\n       justifyContent: \"center\",\n       alignItems: \"center\",\n       fontSize: 20,\n       fontWeight: \"bold\"\n     },\n      mainViz: {\n         display: \"none\"\n      }\n   });"]},"metadata":{},"sourceType":"module"}