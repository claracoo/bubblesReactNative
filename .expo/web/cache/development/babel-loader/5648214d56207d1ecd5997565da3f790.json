{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Circle from \"./Circle\";\nvar window = Dimensions.get(\"window\");\nvar screen = Dimensions.get(\"screen\");\n\nvar Circles = function Circles(props) {\n  var _useState = useState({\n    \"Ambiguity\": [0, \"#B56B9A\"],\n    \"Fear\": [0, \"#E3C6DF\"],\n    \"Goals\": [0, \"#5DACCE\"],\n    \"Rundown\": [0, \"#5C83CE\"]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      types = _useState2[0],\n      setTypes = _useState2[1];\n\n  var _useState3 = useState({\n    window: window,\n    screen: screen\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dimensions = _useState4[0],\n      setDimensions = _useState4[1];\n\n  useEffect(function () {\n    var total = props.ambig + props.fear + props.goals + props.rundown;\n    var ambig = props.ambig / total * 300;\n    var fear = props.fear / total * 300;\n    var goals = props.goals / total * 300;\n    var rundown = props.rundown / total * 300;\n    var tempTypes = {\n      \"Ambiguity\": [ambig, \"#B56B9A\"],\n      \"Fear\": [fear, \"#E3C6DF\"],\n      \"Goals\": [goals, \"#5DACCE\"],\n      \"Rundown\": [rundown, \"#5C83CE\"]\n    };\n    setTypes(tempTypes);\n  });\n  return React.createElement(View, {\n    style: {\n      width: screen / 2\n    }\n  }, Object.keys(types).map(function (type) {\n    return React.createElement(View, null, React.createElement(Circle, {\n      key: type,\n      name: type,\n      size: types[type][0],\n      color: types[type][1]\n    }));\n  }));\n};\n\nexport default Circles;","map":{"version":3,"sources":["/Users/claracook/Desktop/Hackathon/NewProject/Components/Circles.js"],"names":["React","useState","useEffect","Circle","window","Dimensions","get","screen","Circles","props","types","setTypes","dimensions","setDimensions","total","ambig","fear","goals","rundown","tempTypes","width","Object","keys","map","type"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;;AAEA,OAAOC,MAAP;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACA,IAAMC,MAAM,GAAGF,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;;AAEA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACtB,kBAAyBR,QAAQ,CAAC;AAAC,iBAAa,CAAC,CAAD,EAAI,SAAJ,CAAd;AAA8B,YAAQ,CAAC,CAAD,EAAI,SAAJ,CAAtC;AAAsD,aAAS,CAAC,CAAD,EAAI,SAAJ,CAA/D;AAA+E,eAAW,CAAC,CAAD,EAAI,SAAJ;AAA1F,GAAD,CAAjC;AAAA;AAAA,MAAMS,KAAN;AAAA,MAAaC,QAAb;;AACC,mBAAoCV,QAAQ,CAAC;AAAEG,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,MAAM,EAANA;AAAV,GAAD,CAA5C;AAAA;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AAEAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,KAAK,GAAGL,KAAK,CAACM,KAAN,GAAcN,KAAK,CAACO,IAApB,GAA2BP,KAAK,CAACQ,KAAjC,GAAyCR,KAAK,CAACS,OAA3D;AACA,QAAIH,KAAK,GAAIN,KAAK,CAACM,KAAN,GAAcD,KAAf,GAAwB,GAApC;AACA,QAAIE,IAAI,GAAIP,KAAK,CAACO,IAAN,GAAaF,KAAd,GAAuB,GAAlC;AACA,QAAIG,KAAK,GAAIR,KAAK,CAACQ,KAAN,GAAcH,KAAf,GAAwB,GAApC;AACA,QAAII,OAAO,GAAIT,KAAK,CAACS,OAAN,GAAgBJ,KAAjB,GAA0B,GAAxC;AACA,QAAIK,SAAS,GAAG;AAAC,mBAAa,CAACJ,KAAD,EAAQ,SAAR,CAAd;AAAkC,cAAQ,CAACC,IAAD,EAAO,SAAP,CAA1C;AAA6D,eAAS,CAACC,KAAD,EAAQ,SAAR,CAAtE;AAA0F,iBAAW,CAACC,OAAD,EAAU,SAAV;AAArG,KAAhB;AACAP,IAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD,GARQ,CAAT;AAUH,SACG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAEb,MAAM,GAAG;AAAjB;AAAb,KACIc,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmBa,GAAnB,CAAuB,UAACC,IAAD;AAAA,WACrB,oBAAC,IAAD,QACG,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,IAAb;AAAmB,MAAA,IAAI,EAAEA,IAAzB;AAA+B,MAAA,IAAI,EAAEd,KAAK,CAACc,IAAD,CAAL,CAAY,CAAZ,CAArC;AAAqD,MAAA,KAAK,EAAEd,KAAK,CAACc,IAAD,CAAL,CAAY,CAAZ;AAA5D,MADH,CADqB;AAAA,GAAvB,CADJ,CADH;AAUF,CAxBD;;AAyBA,eAAehB,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { View, Text, StyleSheet, Button, Dimensions } from 'react-native';\nimport Circle from './Circle'\n\nconst window = Dimensions.get(\"window\");\nconst screen = Dimensions.get(\"screen\");\n\nconst Circles = (props) => {\n     const[types, setTypes] = useState({\"Ambiguity\": [0, \"#B56B9A\"], \"Fear\": [0, \"#E3C6DF\"], \"Goals\": [0, \"#5DACCE\"], \"Rundown\": [0, \"#5C83CE\"]})\n      const [dimensions, setDimensions] = useState({ window, screen });\n\n      useEffect(() => {\n        let total = props.ambig + props.fear + props.goals + props.rundown \n        let ambig = (props.ambig / total) * 300\n        let fear = (props.fear / total) * 300\n        let goals = (props.goals / total) * 300\n        let rundown = (props.rundown / total) * 300\n        let tempTypes = {\"Ambiguity\": [ambig, \"#B56B9A\"], \"Fear\": [fear, \"#E3C6DF\"], \"Goals\": [goals, \"#5DACCE\"], \"Rundown\": [rundown, \"#5C83CE\"]}\n        setTypes(tempTypes)\n      })\n\n   return (\n      <View style={{width: screen / 2}}>\n         {Object.keys(types).map((type) => (\n            <View>\n               <Circle key={type} name={type} size={types[type][0]} color={types[type][1]}/>\n            </View>\n         )\n         )}\n      </View>\n   );\n}\nexport default Circles;"]},"metadata":{},"sourceType":"module"}