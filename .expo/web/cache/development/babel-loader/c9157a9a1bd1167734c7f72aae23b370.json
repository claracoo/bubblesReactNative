{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Circle from \"./Circle\";\n\nvar Circles = function Circles(props) {\n  var _useState = useState({\n    \"Ambiguity\": [0, \"#B56B9A\"],\n    \"Fear\": [0, \"#E3C6DF\"],\n    \"Goals\": [0, \"#5DACCE\"],\n    \"Rundown\": [0, \"#5C83CE\"]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      types = _useState2[0],\n      setTypes = _useState2[1];\n\n  useEffect(function () {\n    var total = props.ambig + props.fear + props.goals + props.rundown;\n    var ambig = props.ambig / total * 300;\n    var fear = props.fear / total * 300;\n    var goals = props.goals / total * 300;\n    var rundown = props.rundown / total * 300;\n    var tempTypes = {\n      \"Ambiguity\": [ambig, \"#B56B9A\"],\n      \"Fear\": [fear, \"#E3C6DF\"],\n      \"Goals\": [goals, \"#5DACCE\"],\n      \"Rundown\": [rundown, \"#5C83CE\"]\n    };\n    setTypes(tempTypes);\n  });\n  return React.createElement(View, null, React.createElement(View, null, React.createElement(Text, null, \"Feelings\"), React.createElement(Text, null, props.total)), React.createElement(View, {\n    style: {\n      width: 400,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"row\"\n    }\n  }, Object.keys(types).map(function (type) {\n    return React.createElement(View, {\n      key: type,\n      style: {\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }, React.createElement(Circle, {\n      name: type,\n      size: types[type][0],\n      color: types[type][1]\n    }));\n  })));\n};\n\nexport default Circles;","map":{"version":3,"sources":["/Users/claracook/Desktop/Hackathon/NewProject/Components/Circles.js"],"names":["React","useState","useEffect","Circle","Circles","props","types","setTypes","total","ambig","fear","goals","rundown","tempTypes","width","display","flexWrap","flexDirection","Object","keys","map","type","height","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,OAAOC,MAAP;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACtB,kBAAyBJ,QAAQ,CAAC;AAAC,iBAAa,CAAC,CAAD,EAAI,SAAJ,CAAd;AAA8B,YAAQ,CAAC,CAAD,EAAI,SAAJ,CAAtC;AAAsD,aAAS,CAAC,CAAD,EAAI,SAAJ,CAA/D;AAA+E,eAAW,CAAC,CAAD,EAAI,SAAJ;AAA1F,GAAD,CAAjC;AAAA;AAAA,MAAMK,KAAN;AAAA,MAAaC,QAAb;;AAECL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,KAAK,GAAGH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACK,IAApB,GAA2BL,KAAK,CAACM,KAAjC,GAAyCN,KAAK,CAACO,OAA3D;AACA,QAAIH,KAAK,GAAIJ,KAAK,CAACI,KAAN,GAAcD,KAAf,GAAwB,GAApC;AACA,QAAIE,IAAI,GAAIL,KAAK,CAACK,IAAN,GAAaF,KAAd,GAAuB,GAAlC;AACA,QAAIG,KAAK,GAAIN,KAAK,CAACM,KAAN,GAAcH,KAAf,GAAwB,GAApC;AACA,QAAII,OAAO,GAAIP,KAAK,CAACO,OAAN,GAAgBJ,KAAjB,GAA0B,GAAxC;AACA,QAAIK,SAAS,GAAG;AAAC,mBAAa,CAACJ,KAAD,EAAQ,SAAR,CAAd;AAAkC,cAAQ,CAACC,IAAD,EAAO,SAAP,CAA1C;AAA6D,eAAS,CAACC,KAAD,EAAQ,SAAR,CAAtE;AAA0F,iBAAW,CAACC,OAAD,EAAU,SAAV;AAArG,KAAhB;AACAL,IAAAA,QAAQ,CAACM,SAAD,CAAR;AACD,GARQ,CAAT;AAUH,SACG,oBAAC,IAAD,QACG,oBAAC,IAAD,QACG,oBAAC,IAAD,mBADH,EAEG,oBAAC,IAAD,QAAOR,KAAK,CAACG,KAAb,CAFH,CADH,EAKG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACM,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,OAAO,EAAE,MAAtB;AAA8BC,MAAAA,QAAQ,EAAE,MAAxC;AAAgDC,MAAAA,aAAa,EAAE;AAA/D;AAAb,KACIC,MAAM,CAACC,IAAP,CAAYb,KAAZ,EAAmBc,GAAnB,CAAuB,UAACC,IAAD;AAAA,WACrB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAX;AAAiB,MAAA,KAAK,EAAE;AAACP,QAAAA,KAAK,EAAE,GAAR;AAAaQ,QAAAA,MAAM,EAAE,GAArB;AAA0BP,QAAAA,OAAO,EAAE,MAAnC;AAA2CQ,QAAAA,cAAc,EAAE,QAA3D;AAAqEC,QAAAA,UAAU,EAAE;AAAjF;AAAxB,OACG,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEH,IAAd;AAAoB,MAAA,IAAI,EAAEf,KAAK,CAACe,IAAD,CAAL,CAAY,CAAZ,CAA1B;AAA0C,MAAA,KAAK,EAAEf,KAAK,CAACe,IAAD,CAAL,CAAY,CAAZ;AAAjD,MADH,CADqB;AAAA,GAAvB,CADJ,CALH,CADH;AAgBF,CA7BD;;AA8BA,eAAejB,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport Circle from './Circle'\nconst Circles = (props) => {\n     const[types, setTypes] = useState({\"Ambiguity\": [0, \"#B56B9A\"], \"Fear\": [0, \"#E3C6DF\"], \"Goals\": [0, \"#5DACCE\"], \"Rundown\": [0, \"#5C83CE\"]})\n\n      useEffect(() => {\n        let total = props.ambig + props.fear + props.goals + props.rundown \n        let ambig = (props.ambig / total) * 300\n        let fear = (props.fear / total) * 300\n        let goals = (props.goals / total) * 300\n        let rundown = (props.rundown / total) * 300\n        let tempTypes = {\"Ambiguity\": [ambig, \"#B56B9A\"], \"Fear\": [fear, \"#E3C6DF\"], \"Goals\": [goals, \"#5DACCE\"], \"Rundown\": [rundown, \"#5C83CE\"]}\n        setTypes(tempTypes)\n      })\n\n   return (\n      <View>\n         <View>\n            <Text>Feelings</Text>\n            <Text>{props.total}</Text>\n         </View>\n         <View style={{width: 400, display: \"flex\", flexWrap: \"wrap\", flexDirection: \"row\"}}>\n            {Object.keys(types).map((type) => (\n               <View key={type} style={{width: 150, height: 150, display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <Circle name={type} size={types[type][0]} color={types[type][1]}/>\n               </View>\n            )\n            )}\n         </View>\n      </View>\n   );\n}\nexport default Circles;"]},"metadata":{},"sourceType":"module"}