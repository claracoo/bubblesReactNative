{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { GiftedChat, MessageText } from 'react-native-gifted-chat';\nimport { renderAvatar, renderBubble, renderSystemMessage, renderMessage, renderMessageText, renderCustomView } from \"./SystemMessage\";\nimport SystemMessage from \"./SystemMessage\";\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\nimport { dialogflowConfig } from \"../env\";\nvar BOT_USER = {\n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://lh3.googleusercontent.com/BRpng-8ZBXzNfxqdzFCtqFuu69CXcqxc8oY53-PjyvG5qqjxmiqsAFyl9VTnsncTmdoF5A=s86'\n};\n\nvar Dialogue = function Dialogue(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(\"Feeling Depleted\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      trigger = _useState4[0],\n      setTrigger = _useState4[1];\n\n  var _useState5 = useState(\"Dragon\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      madlib = _useState6[0],\n      setMadLib = _useState6[1];\n\n  var _useState7 = useState({\n    \"Feeling Depleted\": \"Why are you feeling depleted? What happened?\",\n    \"My Goals\": \"Why are you concerned about yout goals? What happened?\",\n    \"Feeling Ambiguity\": \"In what way are you feeling that there is ambiguity? What happened?\",\n    \"My Fears\": \"Why do you feel fearful? What happened?\"\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      triggers = _useState8[0],\n      setTriggers = _useState8[1];\n\n  var _useState9 = useState(2),\n      _useState10 = _slicedToArray(_useState9, 2),\n      msgCount = _useState10[0],\n      setMsgCount = _useState10[1];\n\n  var _useState11 = useState([\"ask for feeling\", \"they say what happened\", \"ask why for normal answer\", \"respond normally\", \"asky why with madlib\", \"pick which word for madlib\", \"tell user which madlib picked\", \"respond with madlib\", \"ask if they want to do more or save\"]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      presetMsgs = _useState12[0],\n      setPresetMsgs = _useState12[1];\n\n  useEffect(function () {\n    setMessages([{\n      _id: 1,\n      text: 'Hi, Sam. What is your concern right now?',\n      user: BOT_USER\n    }]);\n    Dialogflow_V2.setConfiguration(dialogflowConfig.client_email, dialogflowConfig.private_key, Dialogflow_V2.LANG_ENGLISH_US, dialogflowConfig.project_id);\n  }, []);\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    console.log(\"idx\", msgCount);\n    var newMessage = messages;\n    delete newMessage[0].createdAt;\n    var newAndNext = [newMessage[0]];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, newAndNext);\n    });\n    Dialogflow_V2.requestQuery(messages[0].text, function (result) {\n      return handleGoogleResponse(result);\n    }, function (error) {\n      return console.log(error);\n    });\n  }, []);\n\n  var handleGoogleResponse = function handleGoogleResponse(result) {\n    var text = result.queryResult.fulfillmentMessages[0].text.text[0];\n    sendBotResponse(text);\n  };\n\n  var sendBotResponse = function sendBotResponse(text) {\n    console.log(\"here\", text);\n    var msg;\n\n    if (text == \"tired\") {\n      msg = {\n        _id: Date.now(),\n        text: \"yoooo\",\n        createdAt: new Date(),\n        user: BOT_USER\n      };\n    } else if (text == \"Show options\") {\n      msg = {\n        _id: Date.now(),\n        text: \"Please choose a destination\",\n        createdAt: new Date(),\n        user: BOT_USER\n      };\n    }\n\n    console.log(text);\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, msg);\n    });\n  };\n\n  return React.createElement(View, null, React.createElement(TouchableOpacity, {\n    style: {\n      width: 300,\n      marginTop: 50,\n      backgroundColor: \"white\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"wrap\",\n      alignContent: \"flex-start\",\n      alignItems: \"flex-start\",\n      justifyContent: \"flex-start\"\n    },\n    onPress: function onPress() {\n      return props.changeScreen({\n        screen: \"Home\"\n      });\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 40,\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"wrap\",\n      alignSelf: \"flex-start\",\n      alignContent: \"flex-start\",\n      justifyContent: \"flex-start\"\n    }\n  }, \"\\u21FD\")), React.createElement(GiftedChat, {\n    messages: messages,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: 1\n    },\n    renderAvatar: renderAvatar,\n    renderBubble: renderBubble,\n    renderSystemMessage: renderSystemMessage,\n    renderMessage: renderMessage,\n    renderMessageText: renderMessageText,\n    renderCustomView: renderCustomView\n  }));\n};\n\nexport default Dialogue;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/Users/claracook/Desktop/reactNative/NewProject/Components/Dialogue.js"],"names":["React","useState","useEffect","useCallback","TouchableOpacity","GiftedChat","MessageText","renderAvatar","renderBubble","renderSystemMessage","renderMessage","renderMessageText","renderCustomView","SystemMessage","Dialogflow_V2","dialogflowConfig","BOT_USER","_id","name","avatar","Dialogue","props","messages","setMessages","trigger","setTrigger","madlib","setMadLib","triggers","setTriggers","msgCount","setMsgCount","presetMsgs","setPresetMsgs","text","user","setConfiguration","client_email","private_key","LANG_ENGLISH_US","project_id","onSend","console","log","newMessage","createdAt","newAndNext","previousMessages","append","requestQuery","result","handleGoogleResponse","error","queryResult","fulfillmentMessages","sendBotResponse","msg","Date","now","width","marginTop","backgroundColor","display","flexDirection","flexWrap","alignContent","alignItems","justifyContent","changeScreen","screen","fontSize","alignSelf","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\nimport { View, Text, StyleSheet, Button, ScrollView } from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { GiftedChat, MessageText } from 'react-native-gifted-chat';\nimport {\n    renderAvatar,\n    renderBubble,\n    renderSystemMessage,\n    renderMessage,\n    renderMessageText,\n    renderCustomView,\n  } from './SystemMessage';\nimport SystemMessage from './SystemMessage'\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\n\nimport { dialogflowConfig } from '../env';  \nconst BOT_USER = {  \n  _id: 2,\n  name: 'FAQ Bot',\n  avatar: 'https://lh3.googleusercontent.com/BRpng-8ZBXzNfxqdzFCtqFuu69CXcqxc8oY53-PjyvG5qqjxmiqsAFyl9VTnsncTmdoF5A=s86'\n};\n\n\nconst Dialogue = (props) => {\n    const [messages, setMessages] = useState([]);\n    const [trigger, setTrigger] = useState(\"Feeling Depleted\")\n    const [madlib, setMadLib] = useState(\"Dragon\")\n    const [triggers, setTriggers] = useState({\"Feeling Depleted\": \"Why are you feeling depleted? What happened?\", \"My Goals\": \"Why are you concerned about yout goals? What happened?\", \"Feeling Ambiguity\": \"In what way are you feeling that there is ambiguity? What happened?\", \"My Fears\": \"Why do you feel fearful? What happened?\"})\n    const [msgCount, setMsgCount] = useState(2)\n    const [presetMsgs, setPresetMsgs] = useState([\"ask for feeling\", \"they say what happened\", \"ask why for normal answer\", \"respond normally\", \"asky why with madlib\", \"pick which word for madlib\", \"tell user which madlib picked\", \"respond with madlib\", \"ask if they want to do more or save\"])\n \n    useEffect(() => {\n        setMessages([\n        {\n            _id: 1,\n            text: 'Hi, Sam. What is your concern right now?',\n            user: BOT_USER\n        },\n        ])\n        Dialogflow_V2.setConfiguration(\n            dialogflowConfig.client_email,\n            dialogflowConfig.private_key,\n            Dialogflow_V2.LANG_ENGLISH_US,\n            dialogflowConfig.project_id\n          );\n    }, [])\n\n    // function getNextMessage(){\n    //     let textToBeSent = \"\"\n    //     if (msgCount == 2) textToBeSent = `${triggers[trigger]}`\n    //     if (msgCount == 4) textToBeSent = \"Why do you think this happened?\"\n    //     if (msgCount == 6) textToBeSent = \"Okay, let’s have fun with this! Choose a word from this list and use it to come up with a new reason for why this situation happened. The crazier the better!\"\n    //     if (msgCount == 8) textToBeSent = `Ok great! Think of a reason your situation by using “${madlib}” in your sentence.`\n    //     if (msgCount == 10) textToBeSent = `Great! Do you want to keep thinking of new reasons or save this story?`\n    //     let nextMsg = {\n    //         _id: Date.now(),\n    //         text: `${textToBeSent}`,\n    //         user: BOT_USER,\n    //     }\n    //     console.log(nextMsg.text)\n    //     return nextMsg\n    // }\n \n  const onSend = useCallback((messages = []) => {\n        console.log(\"idx\", msgCount)\n        let newMessage = messages\n        delete newMessage[0].createdAt\n        let newAndNext = [newMessage[0]]\n        setMessages(previousMessages => GiftedChat.append(previousMessages, newAndNext))\n        Dialogflow_V2.requestQuery(\n            messages[0].text,\n            result => handleGoogleResponse(result),\n            error => console.log(error)\n          );\n  }, [])\n\n  const handleGoogleResponse = (result) => {  \n    let text = result.queryResult.fulfillmentMessages[0].text.text[0];\n    sendBotResponse(text);\n}\n\nconst sendBotResponse = (text) => {  \n    console.log(\"here\", text)\n    let msg;\n    if (text == \"tired\") { \n    msg = {\n      _id: Date.now(),\n      text: \"yoooo\",\n      createdAt: new Date(),\n      user: BOT_USER\n    };\n} \n    else if (text == \"Show options\") {\n        msg = {\n            _id: Date.now(),\n            text: \"Please choose a destination\",\n            createdAt: new Date(),\n            user: BOT_USER,\n          };\n    }\n    console.log(text)\n    setMessages(previousMessages => GiftedChat.append(previousMessages, msg))\n  }\n \n   return (\n    <View>\n        <TouchableOpacity style={{ width: 300, marginTop: 50, backgroundColor: \"white\", display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", alignContent: \"flex-start\", alignItems: \"flex-start\", justifyContent: \"flex-start\"}} onPress={() => props.changeScreen({screen: \"Home\"})}>\n            <Text style={{fontSize: 40, display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\", alignSelf: \"flex-start\", alignContent: \"flex-start\", justifyContent: \"flex-start\"}}>&#8701;</Text>\n        </TouchableOpacity>\n        <GiftedChat\n            messages={messages}\n            onSend={messages => onSend(messages)}\n            user={{ _id: 1}}\n            // renderInputToolbar={InputToolbar}\n            renderAvatar={renderAvatar}\n            renderBubble={renderBubble}\n            renderSystemMessage={renderSystemMessage}\n            renderMessage={renderMessage}\n            renderMessageText={renderMessageText}\n            // renderMessageImage\n            renderCustomView={renderCustomView}\n        />\n    </View>\n   );\n}\nexport default Dialogue;\n\nconst styles = StyleSheet.create({\n   });"]},"metadata":{},"sourceType":"module"}