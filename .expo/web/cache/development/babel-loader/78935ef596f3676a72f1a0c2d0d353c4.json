{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Color from \"./Color\";\nimport { warning, StylePropType } from \"./utils\";\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    width: 200\n  },\n  quickReply: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    width: 200,\n    paddingVertical: 7,\n    paddingHorizontal: 12,\n    minHeight: 50,\n    borderRadius: 13,\n    marginTop: 3,\n    marginBottom: 3\n  },\n  quickReplyText: {\n    overflow: 'visible'\n  },\n  sendLink: {\n    borderWidth: 0\n  },\n  sendLinkText: {\n    color: \"#14171A\",\n    fontWeight: '600',\n    fontSize: 17\n  }\n});\n\nvar sameReply = function sameReply(currentReply) {\n  return function (reply) {\n    return currentReply.value === reply.value;\n  };\n};\n\nvar diffReply = function diffReply(currentReply) {\n  return function (reply) {\n    return currentReply.value !== reply.value;\n  };\n};\n\nvar QuickReplies = function (_Component) {\n  _inherits(QuickReplies, _Component);\n\n  var _super = _createSuper(QuickReplies);\n\n  function QuickReplies() {\n    var _this;\n\n    _classCallCheck(this, QuickReplies);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      replies: []\n    };\n\n    _this.handlePress = function (reply) {\n      return function () {\n        var currentMessage = _this.props.currentMessage;\n        var replies = _this.state.replies;\n\n        if (currentMessage) {\n          var type = currentMessage.quickReplies.type;\n\n          switch (type) {\n            case 'radio':\n              {\n                _this.handleSend([reply])();\n\n                return;\n              }\n\n            case 'checkbox':\n              {\n                if (replies.find(sameReply(reply))) {\n                  _this.setState({\n                    replies: _this.state.replies.filter(diffReply(reply))\n                  });\n                } else {\n                  _this.setState({\n                    replies: [].concat(_toConsumableArray(_this.state.replies), [reply])\n                  });\n                }\n\n                return;\n              }\n\n            default:\n              {\n                warning(\"onQuickReply unknown type: \" + type);\n                return;\n              }\n          }\n        }\n      };\n    };\n\n    _this.handleSend = function (replies) {\n      return function () {\n        var currentMessage = _this.props.currentMessage;\n\n        if (_this.props.onQuickReply) {\n          _this.props.onQuickReply(replies.map(function (reply) {\n            return _objectSpread(_objectSpread({}, reply), {}, {\n              messageId: currentMessage._id\n            });\n          }));\n        }\n      };\n    };\n\n    _this.shouldComponentDisplay = function () {\n      var _this$props = _this.props,\n          currentMessage = _this$props.currentMessage,\n          nextMessage = _this$props.nextMessage;\n      var hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n      var hasNext = !!nextMessage && !!nextMessage._id;\n      var keepIt = currentMessage.quickReplies.keepIt;\n\n      if (hasReplies && !hasNext) {\n        return true;\n      }\n\n      if (hasReplies && hasNext && keepIt) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.renderQuickReplySend = function () {\n      var replies = _this.state.replies;\n      var _this$props2 = _this.props,\n          sendText = _this$props2.sendText,\n          customSend = _this$props2.renderQuickReplySend;\n      return React.createElement(TouchableOpacity, {\n        style: [styles.quickReply, styles.sendLink],\n        onPress: _this.handleSend(replies)\n      }, customSend ? customSend() : React.createElement(Text, {\n        style: styles.sendLinkText\n      }, sendText));\n    };\n\n    return _this;\n  }\n\n  _createClass(QuickReplies, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          currentMessage = _this$props3.currentMessage,\n          color = _this$props3.color,\n          quickReplyStyle = _this$props3.quickReplyStyle;\n      var replies = this.state.replies;\n\n      if (!this.shouldComponentDisplay()) {\n        return null;\n      }\n\n      var type = currentMessage.quickReplies.type;\n      return React.createElement(View, {\n        style: styles.container\n      }, currentMessage.quickReplies.values.map(function (reply, index) {\n        var selected = type === 'checkbox' && replies.find(sameReply(reply));\n        return React.createElement(TouchableOpacity, {\n          onPress: _this2.handlePress(reply),\n          style: [styles.quickReply, quickReplyStyle, {\n            borderColor: \"#F1F1F1\"\n          }, {\n            backgroundColor: \"#F1F1F1\"\n          }, selected && {\n            backgroundColor: \"#3E4449\"\n          }],\n          key: reply.value + \"-\" + index\n        }, React.createElement(Text, {\n          numberOfLines: 10,\n          ellipsizeMode: 'tail',\n          style: [styles.quickReplyText, {\n            color: selected ? Color.white : \"#14171A\"\n          }]\n        }, reply.title));\n      }), replies.length > 0 && this.renderQuickReplySend());\n    }\n  }]);\n\n  return QuickReplies;\n}(Component);\n\nexport { QuickReplies as default };\nQuickReplies.defaultProps = {\n  currentMessage: {\n    quickReplies: []\n  },\n  onQuickReply: function onQuickReply() {},\n  color: Color.peterRiver,\n  sendText: 'Send',\n  keepReplies: false,\n  renderQuickReplySend: undefined,\n  quickReplyStyle: undefined\n};\nQuickReplies.propTypes = {\n  currentMessage: PropTypes.object.isRequired,\n  onQuickReply: PropTypes.func,\n  color: PropTypes.string,\n  sendText: PropTypes.string,\n  keepReplies: PropTypes.bool,\n  renderQuickReplySend: PropTypes.func,\n  quickReplyStyle: StylePropType\n};","map":{"version":3,"sources":["../src/QuickReplies.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Text, StyleSheet, View, TouchableOpacity, } from 'react-native';\nimport Color from './Color';\nimport { warning, StylePropType } from './utils';\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'column',\n        flexWrap: 'wrap',\n        width: 200,\n    },\n    quickReply: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1,\n        width: 200,\n        paddingVertical: 7,\n        paddingHorizontal: 12,\n        minHeight: 50,\n        borderRadius: 13,\n        marginTop: 3,\n        marginBottom: 3,\n    },\n    quickReplyText: {\n        overflow: 'visible',\n    },\n    sendLink: {\n        borderWidth: 0,\n    },\n    sendLinkText: {\n        color: \"#14171A\",\n        fontWeight: '600',\n        fontSize: 17,\n    },\n});\nconst sameReply = (currentReply) => (reply) => currentReply.value === reply.value;\nconst diffReply = (currentReply) => (reply) => currentReply.value !== reply.value;\nexport default class QuickReplies extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            replies: [],\n        };\n        this.handlePress = (reply) => () => {\n            const { currentMessage } = this.props;\n            const { replies } = this.state;\n            if (currentMessage) {\n                const { type } = currentMessage.quickReplies;\n                switch (type) {\n                    case 'radio': {\n                        this.handleSend([reply])();\n                        return;\n                    }\n                    case 'checkbox': {\n                        if (replies.find(sameReply(reply))) {\n                            this.setState({\n                                replies: this.state.replies.filter(diffReply(reply)),\n                            });\n                        }\n                        else {\n                            this.setState({ replies: [...this.state.replies, reply] });\n                        }\n                        return;\n                    }\n                    default: {\n                        warning(`onQuickReply unknown type: ${type}`);\n                        return;\n                    }\n                }\n            }\n        };\n        this.handleSend = (replies) => () => {\n            const { currentMessage } = this.props;\n            if (this.props.onQuickReply) {\n                this.props.onQuickReply(replies.map((reply) => ({\n                    ...reply,\n                    messageId: currentMessage._id,\n                })));\n            }\n        };\n        this.shouldComponentDisplay = () => {\n            const { currentMessage, nextMessage } = this.props;\n            const hasReplies = !!currentMessage && !!currentMessage.quickReplies;\n            const hasNext = !!nextMessage && !!nextMessage._id;\n            const keepIt = currentMessage.quickReplies.keepIt;\n            if (hasReplies && !hasNext) {\n                return true;\n            }\n            if (hasReplies && hasNext && keepIt) {\n                return true;\n            }\n            return false;\n        };\n        this.renderQuickReplySend = () => {\n            const { replies } = this.state;\n            const { sendText, renderQuickReplySend: customSend } = this.props;\n            return (<TouchableOpacity style={[styles.quickReply, styles.sendLink]} onPress={this.handleSend(replies)}>\n        {customSend ? (customSend()) : (<Text style={styles.sendLinkText}>{sendText}</Text>)}\n      </TouchableOpacity>);\n        };\n    }\n    render() {\n        const { currentMessage, color, quickReplyStyle } = this.props;\n        const { replies } = this.state;\n        if (!this.shouldComponentDisplay()) {\n            return null;\n        }\n        const { type } = currentMessage.quickReplies;\n        return (<View style={styles.container}>\n        {currentMessage.quickReplies.values.map((reply, index) => {\n            const selected = type === 'checkbox' && replies.find(sameReply(reply));\n            return (<TouchableOpacity onPress={this.handlePress(reply)} style={[\n                styles.quickReply,\n                quickReplyStyle,\n                { borderColor: \"#F1F1F1\" },\n                {backgroundColor: \"#F1F1F1\"},\n                selected && { backgroundColor: \"#3E4449\" },\n            ]} key={`${reply.value}-${index}`}>\n                <Text numberOfLines={10} ellipsizeMode={'tail'} style={[\n                styles.quickReplyText,\n                { color: selected ? Color.white : \"#14171A\" },\n            ]}>\n                  {reply.title}\n                </Text>\n              </TouchableOpacity>);\n        })}\n        {replies.length > 0 && this.renderQuickReplySend()}\n      </View>);\n    }\n}\nQuickReplies.defaultProps = {\n    currentMessage: {\n        quickReplies: [],\n    },\n    onQuickReply: () => { },\n    color: Color.peterRiver,\n    sendText: 'Send',\n    keepReplies: false,\n    renderQuickReplySend: undefined,\n    quickReplyStyle: undefined,\n};\nQuickReplies.propTypes = {\n    currentMessage: PropTypes.object.isRequired,\n    onQuickReply: PropTypes.func,\n    color: PropTypes.string,\n    sendText: PropTypes.string,\n    keepReplies: PropTypes.bool,\n    renderQuickReplySend: PropTypes.func,\n    quickReplyStyle: StylePropType,\n};\n//# sourceMappingURL=QuickReplies.js.map"]},"metadata":{},"sourceType":"module"}